#!/usr/bin/env node

/**
 * Module dependencies.
 */

var util = require('util');
var app = require('../app');
var debug = require('debug')('unitysync:server');
var WebSocketServer = require('websocket').server;
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);
var server = http.createServer(function(request, response) {
  console.log((new Date()) + ' Received request for ' + request.url);
  response.writeHead(404);
  response.end();
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


var wsServer = new WebSocketServer({
  httpServer: server,
  autoAcceptConnections: false
});

function originIsAllowed(origin) {
  return true;
}

var rooms = {};

wsServer.on('request', function(request) {
  console.log('Request come!');
  if(!originIsAllowed(request.origin)) {
    request.reject();
    debug((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');
    return;
  }

  var connection = request.accept(null, request.origin);
  var guid =  "";
  var joinedRooms = [];
  connection.on('message', function(message) {
    if(message.type === 'utf8') {
      console.log('Received Message: ' + message.utf8Data);
      var jsonObject = JSON.parse(message.utf8Data);
      if(jsonObject.Mode === 'EnterRoom') {
        guid = jsonObject.Guid;
        var roomName = jsonObject.RoomName;
        joinedRooms.push(roomName);
        if(rooms[roomName] == null) {
          rooms[roomName] = {};
        }
        rooms[roomName][guid] = connection;
        console.log(util.format("User(%s) is entered room(%s)", guid, roomName));
      }
    }
    else if(message.type === 'binary') {
      console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');
      connection.sendBytes(message.binaryData);
    }
  });
  connection.on('close', function(reasonCode, description) {
    joinedRooms.forEach(function(roomName) {
      delete rooms[roomName][guid];
      console.log(util.format("Wipped User(%s) from room(%s)", guid, roomName));
    });
    console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
